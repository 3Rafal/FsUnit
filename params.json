{"body":"FsUnit\r\n=======\r\n\r\n**FsUnit** is a set of libraries that makes unit-testing with F# more enjoyable. It adds a special syntax to your favorite .NET testing framework.\r\nFsUnit currently supports NUnit, MbUnit, xUnit, and MsTest (VS11 only).\r\n\r\nThe goals of FsUnit are:\r\n\r\n* to make unit-testing feel more at home in F# , i.e., more functional.\r\n* to leverage existing test frameworks while at the same time adapting them to the F# language in new ways.\r\n\r\nHow to Get It\r\n======\r\n\r\nNuGet packages are available for each of the supported testing frameworks:\r\n\r\n* NUnit - The package with ID FsUnit supports NUnit. It is the original.\r\n* xUnit.NET - The package with ID FsUnit.xUnit supports xUnit.NET.\r\n* MbUnit - The package with ID FsUnit.MbUnit supports MbUnit.\r\n* MSTest - The packager with ID Fs30Unit.MsTest supports MsTest in VS11. \r\n\r\nGetting Started\r\n=======\r\n\r\nWith FsUnit, you can write unit tests like this:\r\n\r\nOne object equals or does not equal another:\r\n\r\n    1 |> should equal 1\r\n\r\n    1 |> should not' (equal 2)\r\n\r\nOne numeric object equals or does not equal another, with a specified tolerance:\r\n\r\n    10.1 |> should (equalWithin 0.1) 10.11\r\n\r\n    10.1 |> should not' ((equalWithin 0.001) 10.11)\r\n\r\nA string does or does not start with or end with a specified substring:\r\n\r\n    \"ships\" |> should startWith \"sh\"\r\n\r\n    \"ships\" |> should not' (startWith \"ss\")\r\n\r\n    \"ships\" |> should endWith \"ps\"\r\n\r\n    \"ships\" |> should not' (endWith \"ss\")\r\n\r\nA List, Seq, or Array instance contains or does not contain a value:\r\n\r\n    [1] |> should contain 1\r\n\r\n    [] |> should not' (contain 1)\r\n\r\nA List or Array instance has a certain length (NUnit only):\r\n\r\n    anArray |> should haveLength 4\r\n\r\nA Collection instance has a certain count (NUnit only):\r\n\r\n    aCollection |> should haveCount 4\r\n\r\nA function should throw a certain type of exception:\r\n\r\n    (fun () -> failwith \"BOOM!\" |> ignore) |> should throw typeof<System.Exception>\r\n\r\nA number of assertions can be created using the `be` keyword:\r\n\r\n    true |> should be True\r\n\r\n    false |> should not' (be True)\r\n\r\n    \"\" |> should be EmptyString\r\n\r\n    \"\" |> should be NullOrEmptyString\r\n\r\n    null |> should be NullOrEmptyString\r\n\r\n    null |> should be Null\r\n\r\n    anObj |> should not' (be Null)\r\n\r\n    anObj |> should be (sameAs anObj)\r\n\r\n    anObj |> should not' (be sameAs otherObj)\r\n\t\r\n    11 |> should be (greaterThan 10)\r\n\r\n    9 |> should not' (be greaterThan 10)\r\n\r\n    11 |> should be (greaterThanOrEqualTo 10)\r\n\r\n    9 |> should not' (be greaterThanOrEqualTo 10)\r\n\r\n    10 |> should be (lessThan 11)\r\n\r\n    10 |> should not' (be lessThan 9)\r\n\r\n    10.0 |> should be (lessThanOrEqualTo 10.1)\r\n\r\n    10 |> should not' (be lessThanOrEqualTo 9)\r\n\r\n    0.0 |> should be ofExactType<float>\r\n\r\n    1 |> should not' (be ofExactType<obj>)\r\n\t\r\n    [] |> should be Empty // NUnit only\r\n\r\n    [1] |> should not' (be Empty) // NUnit only\r\n\r\n\t\"test\" |> should be instanceOfType<string> // Currently, NUnit only and requires version 1.0.1.0+\r\n\t\r\n\t\"test\" |> should not' (be instanceOfType<int>) // Currently, NUnit only and requires version 1.0.1.0+\r\n\t\t\r\n\t2.0 |> should not' (be NaN) // Currently, NUnit only and requires version 1.0.1.0+\r\n\t\r\n\t[1;2;3] |> should be unique // Currently, NUnit only and requires version 1.0.1.0+\r\n\r\nVisual Studio 11 Support\r\n=======\r\n\r\nVisual Studio 11 support is available for all 4 of the targetted testing frameworks. FsUnit.MsTest is supported only in VS11 and no additional steps are required to use it.\r\nFsUnit for NUnit, FsUnit.MbUnit, and FsUnit.xUnit target F# 2.0 as well as F# 3.0. Because of this, a few additional steps are required\r\nin order to use these libraries in VS11. After installing one of these packages, add an App.config file to the project (if one doesn't already exist).\r\nBuild the project and then run the command \"Add-BindingRedirect projectname\" (where projectname is the name of your test project) in the NuGet\r\nPackage Manager Console. This command will update the App.config to include binding redirects from previous version of FSharp.Core to \r\nFSharp.Core version 4.3.0.0. More information about this command can be found at http://docs.nuget.org/docs/reference/package-manager-console-powershell-reference.\r\n\t\r\nExamples\r\n=======\r\n\r\nThe following are examples of FsUnit with MbUnit, xUnit, and NUnit respectively: \r\n\r\nMbUnit:\r\n\r\n    module Test.``Project Euler - Problem 1``\r\n\r\n    open MbUnit.Framework\r\n    open FsUnit.MbUnit\r\n\r\n    let GetSumOfMultiplesOf3And5 max =  \r\n        seq{3..max-1} |> Seq.fold(fun acc number ->  \r\n                            (if (number % 3 = 0 || number % 5 = 0) then   \r\n                                acc + number else acc)) 0 \r\n\r\n    [<Test>]\r\n    let ``When getting sum of multiples of 3 and 5 to a max number of 10 it should return a sum of 23`` () =  \r\n        GetSumOfMultiplesOf3And5(10) |> should equal 23 \r\n\r\nxUnit (Thanks to Keith Nicholas and \"Julian\" from hubFS for this example! http://cs.hubfs.net/forums/thread/3938.aspx):\r\n\r\n    module BowlingGame.``A game of bowling``\r\n\r\n    open Xunit\r\n    open FsUnit.Xunit\r\n\r\n    let (|EndOfGame|IncompleteStrike|Strike|Normal|Other|) (l, frame) =\r\n        match l with\r\n        | _ when frame = 11            -> EndOfGame(0)\r\n        | [10;s]                       -> IncompleteStrike(10+s+s)\r\n        | 10::s::n::tail               -> Strike(10+s+n, s::n::tail)\r\n        |  f::s::n::tail when f+s = 10 -> Normal(f+s+n,  n::tail)\r\n        |  f::s::n::tail               -> Normal(f+s,    n::tail)\r\n        | ls                           -> Other(List.fold (+) 0 ls)\r\n\r\n    let scoreBowls bowls =\r\n        let rec scoreBowls' frame l current_score =\r\n            let nextframe = scoreBowls' (frame+1)\r\n            match (l, frame) with\r\n            | EndOfGame(score)        -> current_score + score\r\n            | IncompleteStrike(score) -> current_score + score\r\n            | Strike(score, l)        -> nextframe l (current_score + score)\r\n            | Normal(score, l)        -> nextframe l (current_score + score)\r\n            | Other(score)            -> current_score + score\r\n        scoreBowls' 1 bowls 0\r\n\r\n    [<Fact>] \r\n    let ``with simple scores should get the expected score.`` () =\r\n        scoreBowls [1;2;3] |> should equal 6\r\n\r\n    [<Fact>]\r\n    let ``with a spare should get the expected score (spare).`` () =\r\n        scoreBowls [2;8;1] |> should equal 12\r\n\r\n    [<Fact>]\r\n    let ``with a strike should get the expected score (strike).`` () =\r\n        scoreBowls [10;1;2] |> should equal 16\r\n\r\n    [<Fact>]\r\n    let ``that is perfect should get a score of 300.``() =\r\n        scoreBowls [for i in 1..18 -> 10] |> should equal 300\r\n\r\n    [<Fact>]\r\n    let ``with spares in the last frame should get the expected score (spare in last frame).`` () =\r\n        scoreBowls ([for i in 1..18 -> 0] @ [2;8;1]) |> should equal 11\r\n\r\n    [<Fact>]\r\n    let ``with a strike in the last frame should get the expected score (strike in last frame).`` () =\r\n        scoreBowls ([for i in 1..18 -> 0] @ [10;10;1]) |> should equal 21\r\n\r\n    [<Fact>] \r\n    let ``with double strikes should add the score of the first strike to the score of the second.`` () =\r\n        scoreBowls [10;10;1] |> should equal 33\r\n\r\n    [<Fact>]\r\n    let ``that looks like an average bowler's game should get the expected score (example game).`` () =\r\n        scoreBowls [1;4;4;5;6;4;5;5;10;0;1;7;3;6;4;10;2;8;6] |> should equal 133\r\n\r\nNUnit (Note: NUnit can also be utilized without specifying a type as in the examples for MbUnit and xUnit):\r\n\r\n    namespace LightBulb.Tests\r\n\r\n    open NUnit.Framework\r\n    open FsUnit\r\n\r\n    type LightBulb(state) =\r\n        member x.On = state\r\n        override x.ToString() =\r\n            match x.On with\r\n            | true  -> \"On\"\r\n            | false -> \"Off\"\r\n\r\n    [<TestFixture>] \r\n    type ``Given a LightBulb that has had its state set to true`` ()=\r\n        let lightBulb = new LightBulb(true)\r\n\r\n        [<Test>] member x.\r\n         ``when I ask whether it is On it answers true.`` ()=\r\n                lightBulb.On |> should be True\r\n\r\n        [<Test>] member x.\r\n         ``when I convert it to a string it becomes \"On\".`` ()=\r\n                string lightBulb |> should equal \"On\"\r\n\r\n    [<TestFixture>]\r\n    type ``Given a LightBulb that has had its state set to false`` ()=\r\n        let lightBulb = new LightBulb(false)\r\n    \r\n        [<Test>] member x.\r\n         ``when I ask whether it is On it answers false.`` ()=\r\n                lightBulb.On |> should be False\r\n    \r\n        [<Test>] member x.\r\n         ``when I convert it to a string it becomes \"Off\".`` ()=\r\n                string lightBulb |> should equal \"Off\"","tagline":"FsUnit makes unit-testing with F# more enjoyable. It adds a special syntax to your favorite .NET testing framework.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Fsunit"}